generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model classes {
  classId      String         @id @default(uuid())
  className    String         @default("none")
  section      String         @default("ROSE")
  category     ClassCategory  @default(Montessori)
  fee          Float          @default(0)
  StudentClass StudentClass[]

  @@index([className])
}

model students {
  studentId           String         @id @default(uuid())
  registrationNumber  String         @unique
  studentMobile       String         @default("none")
  fatherMobile        String         @default("none")
  admissionNumber     String         @unique
  studentName         String         @default("none")
  gender              Gender
  dateOfBirth         String         @default("none")
  fatherName          String         @default("none")
  studentCNIC         String         @default("0000-0000000-0")
  fatherCNIC          String         @default("0000-0000000-0")
  fatherProfession    String         @default("none")
  bloodGroup          String?        @default("none")
  guardianName        String?        @default("none")
  caste               String         @default("none")
  currentAddress      String         @default("none")
  permanentAddress    String         @default("none")
  medicalProblem      String?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  isAssign            Boolean        @default(false)
  discount            Float          @default(0)
  discountbypercent   Float          @default(0)
  StudentClass        StudentClass[]
}

model employees {
  employeeId        String   @id @default(uuid())
  employeeName      String   @db.VarChar(100)
  fatherName        String   @db.VarChar(100)
  gender            Gender
  dob               String   @default("none")
  cnic              String   @db.Char(15)
  maritalStatus     MaritalStatus
  doj               String   @default("none")
  designation       Designation
  residentialAddress String
  mobileNo          String   @db.VarChar(13)
  additionalContact String?  @db.VarChar(13)
  education         String   @db.VarChar(100)
  salaryAssignments SalaryAssignment[]
  salaryIncrements  SalaryIncrement[]

  @@index([employeeName])
  @@index([cnic])
}

model SalaryAssignment {
  id           String   @id @default(uuid())
  employeeId   String
  employee     employees @relation(fields: [employeeId], references: [employeeId])
  baseSalary   Float
  increment    Float
  totalSalary  Float
  assignedDate DateTime @default(now())
  sessionId    String
  session      sessions @relation(fields: [sessionId], references: [sessionId])
}

model SalaryIncrement {
  id              String   @id @default(uuid())
  employeeId      String
  employee        employees @relation(fields: [employeeId], references: [employeeId])
  incrementAmount Float
  reason          String
  effectiveDate   DateTime
}

model sessions {
  sessionId         String             @id @default(uuid())
  sessionName       String             @default("none")
  sessionFrom       String             @default("none")
  sessionTo         String             @default("none")
  StudentClass      StudentClass[]
  SalaryAssignments SalaryAssignment[]
}

model fees {
  feeId      String   @id @default(uuid())
  feeName    String
  feeTuition Int
  feePaper   Int
  feeSport   Int
  feeIdcard  Int
  feeComm    Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model users {
  userId   String @id @default(uuid())
  email    String @unique
  password String
  role     Role

  @@index([email])
}

model StudentClass {
  scId      String   @id @default(uuid())
  studentId String
  classId   String
  sessionId String
  class     classes  @relation(fields: [classId], references: [classId])
  session   sessions @relation(fields: [sessionId], references: [sessionId])
  student   students @relation(fields: [studentId], references: [studentId])
}

enum Gender {
  MALE
  FEMALE
  CUSTOM
}
enum Role {
  ADMIN
  TEACHER
  CLERK
}
enum MaritalStatus {
  Married
  Unmarried
  Widow
  Divorced
}
enum Designation {
  Principal
  Admin
  Head
  Clerk
  Teacher
  Worker
}
enum ClassCategory {
  Montessori
  Primary
  Middle
  SSC_I
  SSC_II
}